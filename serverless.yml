service: minions-backend

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-step-functions
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    prodTable: products
    orderTable: orders
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
    - Effect: Allow
      Action:
        - sns:*
      Resource:
        - "*"

functions:
  checkData:
    handler: checkData.main
  updateItems:
    handler: updateItems.main
    timeout: 60
  signUpConfirm:
    handler: signUpConfirm.main
    events:
      - cognitoUserPool:
          pool: minions-user-pool
          trigger: PreSignUp
          existing: true
  listMinions:
    handler: listMinions.main
    events:
      - http:
          path: minions
          method: get
          cors: true
  getMinion:
    handler: getMinion.main
    events:
      - http:
          path: minions/{id}
          method: get
          cors: true
  listOrders:
    handler: listOrders.main
    events:
      - http:
          path: orders
          method: get
          cors: true
          authorizer: aws_iam
  createOrder:
    handler: createOrder.main
    events:
      - http:
          path: orders
          method: post
          cors: true
          authorizer: aws_iam

stepFunctions:
  stateMachines:
    scrapper:
      events:
        - schedule:
            rate: rate(20 hours)
      name: Scrapper
      definition:
        Comment: "Populating dynamoDB with scrapped data"
        StartAt: CheckData
        States:
          CheckData:
            Type: Task
            Resource:
              Fn::GetAtt: [checkData, Arn]
            Next: isThereNewData
          isThereNewData:
            Type: Choice
            Choices:
              - Variable: "$.isNewData"
                BooleanEquals: true
                Next: Yes
              - Variable: "$.isNewData"
                BooleanEquals: false
                Next: No
            Default: No
          Yes:
            Type: Pass
            Next: UpdateItems
          No:
            Type: Pass
            End: true
          UpdateItems:
            Type: Task
            Resource:
              Fn::GetAtt: [updateItems, Arn]
            End: true

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
